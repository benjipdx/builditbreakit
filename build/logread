#!/usr/bin/env python
# logread
# rainy_day_hackers
# Aug 30, 2014

import sys
import os.path
import argparse
import gallerylog.db as db
import gallerylog.sanitize as sn


# --------------------------------------------------
# setting up parser
# --------------------------------------------------
parser = argparse.ArgumentParser(description='queries the state of the gallery. It prints which employees and guests are in the gallery or its rooms, and allows for various time-based queries of the state of the gallery.')

parser.add_argument('log', metavar='log',  nargs='*',
                   help="The path to the file log used for recording events. The filename may be specified with a string of alphanumeric characters.")

parser.add_argument('-K', dest='token', action='store',
                   default='',
                   help="Token used to authenticate the log. This token consists of an arbitrary sized string of alphanumeric characters and will be the same between executions of logappend and logread. If the log cannot be authenticated with the token (i.e., it is not the same token that was used to create the file), then \"security error\" should be printed to stderr and -1 should be returned.")

parser.add_argument('-E', dest='employeename', action='store', default='',  # I want an empty of type string, not none for logic later
                   help="Employee name. May be specified multiple times.")

parser.add_argument('-G', dest='guestname', action='store', default='',
                   help="Guest name. May be specified multiple times.")

parser.add_argument('-H', dest='html', action='store_const', default=False, const=True,
                   help="Specifies output to be in HTML (as opposed to plain text). Details in options below.")

parser.add_argument('-S', dest='state', action='store_const', default=False, const=True,
                   help="Print the current state of the log to stdout. The state should be printed to stdout on at least two lines, with lines separated by the \n (newline) character. The first line should be a comma-separated list of employees currently in the gallery. The second line should be a comma-separated list of guests currently in the gallery. The remaining lines should provide room-by-room information indicating which guest or employee is in which room. Each line should begin with a room ID, printed as a decimal integer, followed by a colon, followed by a space, followed by a comma-separated list of guests and employees. Room IDs should be printed in ascending integer order, all guest/employee names should be printed in ascending lexicographic string order. If -H is specified, the output should instead be formatted as HTML conforming to the following HTML specification.")

parser.add_argument('-R', dest='roomlist', action='store_const', default=False, const=True,
                   help="Give a list of all rooms entered by an employee or guest. Output the list of rooms in chronological order. If this argument is specified, either -E or -G must be specified. The list is printed to stdout in one comma-separated list of room identifiers. If -H is specified, the format should instead by in HTML conforming to the following HTML specification.")

args = parser.parse_args()


# TODO: add all the optional arguments (commented out until implemented?)

# -----------------------------------------------------
# Functions
# -----------------------------------------------------

# specifcation for how to fail
def invalid():
    print("invalid")
    sys.exit(-1)


# make a string containing comma separated list
def makeString(aList):
    stringFoo=''
    comma=','
    for item in aList:
        stringFoo+=item+comma
        stringFoo=stringFoo.rstrip(comma)
    return stringFoo

# [-H] -S html header stuff
def SHtmlStart():
    print("<html>")
    print("<body>")
    print("<table>")
    print("<tr>")
    print("  <th>Employee</th>")
    print("  <th>Guest</th>")
    print("</tr>")
    print("<tr>")

def SHtmlMid():
    print("</tr>")
    print("</table>")
    print("<table>")
    print("<tr>")
    print("  <th>Room ID</th>")
    print("  <th>Occupants</th>")
    print("</tr>")

def SHtmlEnd():
    print("</table>")
    print("</body>")
    print("</html>")

# -----------------------------------------------
# Begin main
# -----------------------------------------------

# validate args
# right amount of args and in right combination?
if (args.state and args.roomlist) or not (args.state or args.roomlist):
    # can't have both but must have one
    invalid()

# may need to adjust this if we hit the optional #2
if (args.guestname and args.employeename):
    # pick one, not both
    invalid()

if (args.state and (args.employeename or args.guestname)):
    # names not valid for state
    invalid()

if (args.roomlist and not (args.guestname or args.employeename)):
    # roomlist requires name(s)
    invalid()



# sanitized text?
if args.token:
    if not (type(args.token) == type('string')):
        # only one token
        invalid()
    if(sn.sanitizeAlphanumeric(args.token) == False):
        invalid()
else:
    # token is required
    invalid()

if args.log:
    if not len(args.log) == 1:
        # only one log
        invalid()
    else:
        args.log = args.log[0]
    if(sn.sanitizeAlphanumeric(args.log) == False):
        invalid()
    if not (os.path.isfile(args.log)):
        # is that actually a log file?
        invalid()
else:
    # need to specify a log file always
    invalid()

if args.employeename:
    # ensure only one arg with -E
    if not (type(args.employeename) == type('string')):
        invalid()
    if(sn.sanitizeAlpha(args.employeename) == False):
        invalid()

if args.guestname:
    # ensure only one arg with -G
    if not (type(args.guestname) == type('string')):
        invalid()
    if(sn.sanitizeAlpha(args.guestname) == False):
        invalid()


# args shouold now be valid
# now we can open and verify the encrypted database

sql = db.DB(args.log, args.token)
if not sql.successful():
    sys.stderr.write("integrity violation")
    sys.exit(-1)

### TODO: the main program logic goes here

# name, type, room?
if args.state:
    # get the data
    listEmployees=sql.getPeopleHereByType('E')
    listGuests=sql.getPeopleHereByType('G')
    roomDict=sql.getPeopleByRoom()

    if args.html:
        SHtmlStart()
        print("<td>{0}</td>".format(makeString(listEmployees)))
        print("<td>{0}</td>".format(makeString(listGuests)))
        SHtmlMid()
        for room,personList in sorted(roomDict.items()):
            print("<tr>")
            print("  <td>{0}</td>".format(room))
            print("  <td>{0}</td>".format(makeString(personList)))
            print("</tr>")
        SHtmlEnd()
    else:
        # normal out put
        print(makeString(listEmployees))
        print(makeString(listGuests))
        for room,personList in sorted(roomDict.items()):
            print("{0}: {1}".format(room,makeString(personList)))


# always gracefully close the DB after it is open!
sql.closeDBFile()
